(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),o=(n(0),n(146)),r=["components"],l={id:"hw5",title:"Homework 5"},c={unversionedId:"assignments/hw5",id:"assignments/hw5",isDocsHomePage:!1,title:"Homework 5",description:"\x3c!--",source:"@site/docs/assignments/hw5.md",slug:"/assignments/hw5",permalink:"/cs220-f21/docs/assignments/hw5",version:"current"},s=[{value:"Testing",id:"testing",children:[]},{value:"Shared Test Repository",id:"shared-test-repository",children:[]},{value:"Files, Submitting",id:"files-submitting",children:[{value:"Provided files",id:"provided-files",children:[]},{value:"Gitlog",id:"gitlog",children:[]},{value:"README",id:"readme",children:[]}]},{value:"Compiling",id:"compiling",children:[]},{value:"Submission",id:"submission",children:[]}],p={rightToc:s};function b(e){var t=e.components,n=Object(i.a)(e,r);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The first thing you will need to think about is how to use STL containers\nto represent the data in the phone database.  The ",Object(o.b)("inlineCode",{parentName:"p"},"map")," container type\nshould be very useful.  For example, if ",Object(o.b)("inlineCode",{parentName:"p"},"Name")," represents a contact\nname (last name and first name), and ",Object(o.b)("inlineCode",{parentName:"p"},"PhoneNumberCollection")," represents a\ncollection of phone numbers for a contact, then the variable declaration"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},"map<Name, PhoneNumberCollection> phone_db;\n")),Object(o.b)("p",null,"could be a good representation for the entire phone database."),Object(o.b)("p",null,"Note that in order to allow searches to be case-insensitive, you will\nneed to have a way of ordering the keys in this map that ignores case\ndistinctions.  I.e., we want the contacts ",Object(o.b)("inlineCode",{parentName:"p"},"Granger,Hermione")," and ",Object(o.b)("inlineCode",{parentName:"p"},"granger,HERMIONE"),"\nto be considered the same when searching, and we want ",Object(o.b)("inlineCode",{parentName:"p"},"granger,HERMIONE"),'\nto be considered "less than" ',Object(o.b)("inlineCode",{parentName:"p"},"Longbottom,Neville"),", even though the\ncharacter code for ",Object(o.b)("inlineCode",{parentName:"p"},"g")," is greater than the character code for ",Object(o.b)("inlineCode",{parentName:"p"},"L"),".\nTo allow this, we will need the map to use an appropriate ordering function\nfor the map keys (in this case, the keys belong to the ",Object(o.b)("inlineCode",{parentName:"p"},"Name")," data type.)\nThe default ordering function for keys in ",Object(o.b)("inlineCode",{parentName:"p"},"map"),"s is\n",Object(o.b)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/utility/functional/less"},Object(o.b)("inlineCode",{parentName:"a"},"std::less")),",\nwhich in turn is based on ordering values according to the ",Object(o.b)("inlineCode",{parentName:"p"},"<")," (less than) operator.\nSo, one way to ensure that contact names are ordered correctly is to override the ",Object(o.b)("inlineCode",{parentName:"p"},"<"),"\noperator.  This would look something like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},"bool operator<(const Name &left, const Name &right) {\n  // return true if left<right, false otherwise,\n  // ignoring case\n}\n")),Object(o.b)("p",null,"As long as this function exists, is defined correctly, and its declaration\npreceeds any use of the ",Object(o.b)("inlineCode",{parentName:"p"},"Name")," type as the key type in a ",Object(o.b)("inlineCode",{parentName:"p"},"map")," instance,\nthen the contact names should be ordered correctly."),Object(o.b)("p",null,"Note that the ",Object(o.b)("inlineCode",{parentName:"p"},"Name")," and ",Object(o.b)("inlineCode",{parentName:"p"},"PhoneNumberCollection")," data types don't necessarily\nneed to be ",Object(o.b)("inlineCode",{parentName:"p"},"struct")," or ",Object(o.b)("inlineCode",{parentName:"p"},"class")," types that you define.  They could also\nbe ",Object(o.b)("inlineCode",{parentName:"p"},"typedef"),"s for STL data types.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},"// Note: probably not a great way to represent phone numbers for\n// a contact\ntypedef vector<string> PhoneNumberCollection;\n")),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"typedef")," would make ",Object(o.b)("inlineCode",{parentName:"p"},"PhoneNumberCollection")," an alias for ",Object(o.b)("inlineCode",{parentName:"p"},"vector<string>"),".\nEven though ",Object(o.b)("inlineCode",{parentName:"p"},"vector<string>")," is not a great way to represent the collection of\nphone numbers for a contact, it's likely that you can use STL data types\nto achieve a better representation."),Object(o.b)("p",null,"When writing the database to a file in the ",Object(o.b)("inlineCode",{parentName:"p"},"S")," command, you will need to think\nabout how to write the data so that it can be easily read back in by the ",Object(o.b)("inlineCode",{parentName:"p"},"R"),"\ncommand.  One useful technique to use when writing a collection of data\nis to first write the number of items in the collection, and then write each\nindividual item.  That way, the code that reads the data will know exactly\nhow many items should be read back in."),Object(o.b)("h2",{id:"testing"},"Testing"),Object(o.b)("p",null,"A good way to test the program is to prepare an input file with commands\nto send to the program, and an expected output file containing the\nresult and error messages expected to be produced.  (The expected output\nfile shouldn't contain the info messages, since producing them is optional,\nand their content isn't specified.)"),Object(o.b)("p",null,"Example input and expected output files called ",Object(o.b)("inlineCode",{parentName:"p"},"input1.txt")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"expected_output1.txt")," are provided with the starter files.  Here is how\nyou can use them to test your program:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'make phone_db\n(./phone_db < input1.txt) | egrep -v "^Info:" > actual1.txt\ndiff expected_output1.txt actual1.txt\necho $?\n')),Object(o.b)("p",null,"If the ",Object(o.b)("inlineCode",{parentName:"p"},"diff")," command produces no output, and the ",Object(o.b)("inlineCode",{parentName:"p"},"echo $?")," command results in\nthe output ",Object(o.b)("inlineCode",{parentName:"p"},"0"),", then your program's output matched the expected output."),Object(o.b)("p",null,"If the files that ",Object(o.b)("inlineCode",{parentName:"p"},"diff")," is comparing are different, then it will display the differences in the lines of each file, using ",Object(o.b)("inlineCode",{parentName:"p"},"<")," to indicate a line from the first file argument and a ",Object(o.b)("inlineCode",{parentName:"p"},">")," to indicate a line from the second file argument. It will also give you indications of line numbers for the differences, such as ",Object(o.b)("inlineCode",{parentName:"p"},"5c5,6")," to mean line number 5 between columns 5 and 6. Here is a brief example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"5c5,6\n< // PART 7 TO DO: Make sure to include any additional necessary header files\n---\n> // PART ? TO DO: Make sure to include any additional necessary header files\n")),Object(o.b)("h2",{id:"shared-test-repository"},"Shared Test Repository"),Object(o.b)("p",null,"To allow you to share your tests with the entire class, and to benefit from\ntests written by other students, we have set up a shared test repository:\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/jhu-ip/cs220-sp21-hw5-tests"},"https://github.com/jhu-ip/cs220-sp21-hw5-tests")),Object(o.b)("p",null,"The basic idea is that you can clone this repository and then"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"use ",Object(o.b)("inlineCode",{parentName:"li"},"git add")," and ",Object(o.b)("inlineCode",{parentName:"li"},"git push")," to contribute your own tests"),Object(o.b)("li",{parentName:"ul"},"use ",Object(o.b)("inlineCode",{parentName:"li"},"git pull")," to gain access to tests written by others")),Object(o.b)("p",null,"See the ",Object(o.b)("inlineCode",{parentName:"p"},"README.md")," for details."),Object(o.b)("h2",{id:"files-submitting"},"Files, Submitting"),Object(o.b)("h3",{id:"provided-files"},"Provided files"),Object(o.b)("p",null,"Start with the template Makefile, source files, and header file in the public repo:\n",Object(o.b)("inlineCode",{parentName:"p"},"cs220-sp21-public/homework/hw5/"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The Makefile is very minimal, building an executable called ",Object(o.b)("inlineCode",{parentName:"p"},"phone_db"),"\nfrom a source file called ",Object(o.b)("inlineCode",{parentName:"p"},"phone_db.cpp"),". This might be sufficient, but if\nyou would like to use additional source and/or header files,\nyou will need to modify the Makefile accordingly")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The initial ",Object(o.b)("inlineCode",{parentName:"p"},"phone_db.cpp")," is ",Object(o.b)("em",{parentName:"p"},"very")," minimal, consisting of just a ",Object(o.b)("inlineCode",{parentName:"p"},"main")," function"))),Object(o.b)("h3",{id:"gitlog"},"Gitlog"),Object(o.b)("p",null,"You must include with your submission a copy of the output of ",Object(o.b)("inlineCode",{parentName:"p"},"git log"),"\nshowing at least five commits to the repository. Save the ",Object(o.b)("inlineCode",{parentName:"p"},"git log")," output\ninto a file called ",Object(o.b)("inlineCode",{parentName:"p"},"gitlog.txt")," (e.g. by doing ",Object(o.b)("inlineCode",{parentName:"p"},"git log > gitlog.txt)"),"."),Object(o.b)("h3",{id:"readme"},"README"),Object(o.b)("p",null,"Please submit a file called ",Object(o.b)("inlineCode",{parentName:"p"},"README")," (not ",Object(o.b)("inlineCode",{parentName:"p"},"README.txt")," or ",Object(o.b)("inlineCode",{parentName:"p"},"README.md"),",\netc -- just ",Object(o.b)("inlineCode",{parentName:"p"},"README"),") including information about what design choices you\nmade and anything the graders should know about your submission. In your\n",Object(o.b)("inlineCode",{parentName:"p"},"README")," you should:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Write your name and JHED ID at the top of the file."),Object(o.b)("li",{parentName:"ul"},"Briefly justify the structure of your program; why you defined the functions you did, etc."),Object(o.b)("li",{parentName:"ul"},"If applicable: Highlight anything you did that was particularly clever."),Object(o.b)("li",{parentName:"ul"},"If applicable: Tell the graders if you couldn\u2019t do everything. Where\ndid you stop? What did you get stuck on? What are the parts you already\nknow do not work according to the requirements?")),Object(o.b)("h2",{id:"compiling"},"Compiling"),Object(o.b)("p",null,"Your code should compile with no errors or warnings with the typical\ncommand: ",Object(o.b)("inlineCode",{parentName:"p"},"g++ <source> -Wall -Wextra -std=c++-11 -pedantic"),".\n(These are the options included in the provided ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile"),".)"),Object(o.b)("h2",{id:"submission"},"Submission"),Object(o.b)("p",null,"Create a ",Object(o.b)("inlineCode",{parentName:"p"},".zip")," file named ",Object(o.b)("inlineCode",{parentName:"p"},"hw5.zip")," containing:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"All ",Object(o.b)("inlineCode",{parentName:"li"},".cpp")," files"),Object(o.b)("li",{parentName:"ul"},"All ",Object(o.b)("inlineCode",{parentName:"li"},".h")," files (if any)"),Object(o.b)("li",{parentName:"ul"},"README"),Object(o.b)("li",{parentName:"ul"},"Makefile"),Object(o.b)("li",{parentName:"ul"},"gitlog.txt")),Object(o.b)("p",null,"Copy ",Object(o.b)("inlineCode",{parentName:"p"},"hw5.zip")," file to your local machine (using ",Object(o.b)("inlineCode",{parentName:"p"},"scp")," or ",Object(o.b)("inlineCode",{parentName:"p"},"pscp"),"),\nand submit it as ",Object(o.b)("strong",{parentName:"p"},"Homework 5")," on Gradescope. When you submit, gradescope\nconducts a series of automatic tests. These do basic checks, e.g. to\ncheck that you submitted the right files. If you see error messages (in\nred), address them and resubmit. You may re-submit any number of times\nprior to the deadline; only your latest submission will be graded. Review\nthe course syllabus for late submission policies (grace period and late\ndays), and remember that ",Object(o.b)("strong",{parentName:"p"},"if your final submitted code does not compile,\nyou will likely earn a zero score for the assignment.")),Object(o.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Remember that if your final submitted code does not compile, you will earn a zero score for the assignment."))),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Two notes regarding automatic checks for programming assignments:"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"Passing an automatic check is not itself worth points. (There might be\na nominal, low point value like 0.01 associated with a check, but that\nwon\u2019t count in the end.) The checks exist to help you and the graders\nfind obvious errors."),Object(o.b)("li",{parentName:"ul"},"The automatic checks cover some of the requirements set out in the\nassignment, but not all. It is up to you to test your own work and ensure\nyour programs satisfy all stated requirements. Passing all the automatic\nchecks does not mean you have earned all the points.")))))}b.isMDXComponent=!0},146:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(r,".").concat(u)]||b[u]||d[u]||o;return n?i.a.createElement(m,l(l({ref:t},s),{},{components:n})):i.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);